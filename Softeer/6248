import java.io.*;
import java.util.*;

// 알고리즘: 방향 그래프
// 시간복잡도: n 의 최댓값이 10만이기 때문에 O(n^2)은 안됨, 즉 인접행렬로는 안됨

public class Main {
    private static int N,M,S,T;
    private static List<List<Integer>> graph = new ArrayList<>();
    private static List<List<Integer>> reverseGraph = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        // 그래프 초기화
        for (int i=0; i<N; i++) {
            graph.add(new ArrayList<>());
            reverseGraph.add(new ArrayList<>());
        }

        for (int i=0; i<M; i++) {
            st = new StringTokenizer(br.readLine()," ");
            int firstNode = Integer.parseInt(st.nextToken()) - 1;
            int secondNode = Integer.parseInt(st.nextToken()) - 1;

            graph.get(firstNode).add(secondNode);
            reverseGraph.get(secondNode).add(firstNode);
        }

        st = new StringTokenizer(br.readLine());
        S = Integer.parseInt(st.nextToken()) - 1;
        T = Integer.parseInt(st.nextToken()) - 1;
        
        System.out.println(getResult());
    }
    
    private static int getResult() {
        // 출근길
        boolean[] v1 = new boolean[N];
        v1[T] = true;
        dfs(S, graph, v1);

        boolean[] v2 = new boolean[N];
        dfs(T, reverseGraph, v2);

        // 퇴근길
        boolean[] v3 = new boolean[N];
        v3[S] = true;
        dfs(T, graph, v3);

        boolean[] v4 = new boolean[N];
        dfs(S, reverseGraph, v4);

        int ans = 0;
        for (int i=0; i<N; i++) {
            if (v1[i] && v2[i] && v3[i] && v4[i]) ans++;
        }

        // S와 T 노드를 제외해야 하기 때문에 -2 함
        return ans-2;
    }

    private static void dfs(int current, List<List<Integer>> graph, boolean[] v) {
        if(v[current]) return;
        
        v[current] = true;
        for (int next : graph.get(current)) {           
            dfs(next, graph, v);
        }   
    }
}
